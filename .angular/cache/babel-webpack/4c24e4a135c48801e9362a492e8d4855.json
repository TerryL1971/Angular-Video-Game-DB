{"ast":null,"code":"import { HttpParams } from '@angular/common/http';\nimport { forkJoin } from 'rxjs';\nimport { map } from 'rxjs/operators';\nimport { environment as env } from 'src/environments/environment';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport let HttpService = /*#__PURE__*/(() => {\n  class HttpService {\n    constructor(http) {\n      this.http = http;\n    }\n\n    getGameList(ordering, search) {\n      let params = new HttpParams().set('ordering', ordering);\n\n      if (search) {\n        params = new HttpParams().set('ordering', ordering).set('search', search);\n      }\n\n      return this.http.get(`${env.BASE_URL}/games`, {\n        params: params\n      });\n    }\n\n    getGameDetails(id) {\n      const gameInfoRequest = this.http.get(`${env.BASE_URL}/games/${id}`);\n      const gameTrailersRequest = this.http.get(`${env.BASE_URL}/games/${id}/movies`);\n      const gameScreenshotsRequest = this.http.get(`${env.BASE_URL}/games/${id}/screenshots`);\n      return forkJoin({\n        gameInfoRequest,\n        gameScreenshotsRequest,\n        gameTrailersRequest\n      }).pipe(map(resp => {\n        var _a, _b;\n\n        return Object.assign(Object.assign({}, resp['gameInfoRequest']), {\n          screenshots: (_a = resp['gameScreenshotsRequest']) === null || _a === void 0 ? void 0 : _a.results,\n          trailers: (_b = resp['gameTrailersRequest']) === null || _b === void 0 ? void 0 : _b.results\n        });\n      }));\n    }\n\n  }\n\n  HttpService.ɵfac = function HttpService_Factory(t) {\n    return new (t || HttpService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  HttpService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: HttpService,\n    factory: HttpService.ɵfac,\n    providedIn: 'root'\n  });\n  return HttpService;\n})();","map":null,"metadata":{},"sourceType":"module"}